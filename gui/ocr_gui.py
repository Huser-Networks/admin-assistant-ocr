#!/usr/bin/env python3
"""
Interface graphique pour OCR Assistant
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog, simpledialog
import os
import sys
import json
import subprocess
import threading
from datetime import datetime
from pathlib import Path

# Ajouter le chemin parent pour les imports (gui est dans un sous-dossier)
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# V√©rifier les d√©pendances au d√©marrage
from src.utils.dependency_checker import DependencyChecker


class OCRAssistantGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("OCR Assistant - Interface de Gestion")
        self.root.geometry("900x700")
        
        # Variables
        self.config_path = "src/config/config.json"
        self.hierarchical_config_path = "src/config/hierarchical_config.json"
        self.processing = False
        self.dependencies_ok = False
        
        # Statistiques de traitement
        self.stats = {
            "PDFs trouv√©s": 0,
            "En cours": 0,
            "Trait√©s": 0,
            "Erreurs": 0
        }
        
        # Variables pour la r√©vision
        self.current_result = None
        self.results_list = []
        self.pending_correction = None  # Stocke la correction en attente
        self.original_data = None  # Stocke les donn√©es originales
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Cr√©er l'interface
        self.create_widgets()
        
        # Charger la configuration
        self.load_configuration()
        
        # V√©rifier les d√©pendances
        self.check_dependencies()
        
        # Mettre √† jour l'√©tat initial
        self.update_status()
        
        # D√©marrer la mise √† jour automatique des statistiques
        self.auto_update_stats()
    
    def create_widgets(self):
        """Cr√©e tous les widgets de l'interface"""
        
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Onglet Principal
        self.create_main_tab()
        
        # Onglet Configuration
        self.create_config_tab()
        
        # Onglet Traitement
        self.create_processing_tab()
        
        # Onglet R√©vision
        self.create_review_tab()
        
        # Onglet Logs
        self.create_logs_tab()
        
        # Barre de statut
        self.status_bar = ttk.Label(self.root, text="Pr√™t", relief=tk.SUNKEN, anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    
    def create_main_tab(self):
        """Onglet principal avec vue d'ensemble"""
        main_frame = ttk.Frame(self.notebook)
        self.notebook.add(main_frame, text="üè† Accueil")
        
        # Titre
        title_label = ttk.Label(main_frame, text="OCR Assistant", font=('Arial', 18, 'bold'))
        title_label.pack(pady=20)
        
        # Cadre d'informations
        info_frame = ttk.LabelFrame(main_frame, text="√âtat du Syst√®me", padding=10)
        info_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Informations syst√®me
        self.info_text = tk.Text(info_frame, height=10, width=60, wrap=tk.WORD)
        self.info_text.pack(fill=tk.BOTH, expand=True)
        
        # Boutons d'action rapide
        action_frame = ttk.Frame(main_frame)
        action_frame.pack(pady=20)
        
        ttk.Button(action_frame, text="üîß Configuration Rapide", 
                  command=self.quick_config, width=20).grid(row=0, column=0, padx=5, pady=5)
        ttk.Button(action_frame, text="‚ñ∂Ô∏è Lancer Traitement", 
                  command=self.quick_process, width=20).grid(row=0, column=1, padx=5, pady=5)
        ttk.Button(action_frame, text="üìä Voir Statistiques", 
                  command=self.show_stats, width=20).grid(row=1, column=0, padx=5, pady=5)
        ttk.Button(action_frame, text="üîÑ Rafra√Æchir", 
                  command=self.update_status, width=20).grid(row=1, column=1, padx=5, pady=5)
        ttk.Button(action_frame, text="üîç V√©rifier D√©pendances", 
                  command=self.check_dependencies_gui, width=20).grid(row=2, column=0, padx=5, pady=5)
        ttk.Button(action_frame, text="üì¶ Installer D√©pendances", 
                  command=self.install_dependencies, width=20).grid(row=2, column=1, padx=5, pady=5)
    
    def create_config_tab(self):
        """Onglet de configuration"""
        config_frame = ttk.Frame(self.notebook)
        self.notebook.add(config_frame, text="‚öôÔ∏è Configuration")
        
        # Frame pour les dossiers
        folders_frame = ttk.LabelFrame(config_frame, text="Dossiers Configur√©s", padding=10)
        folders_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Liste des dossiers
        self.folders_listbox = tk.Listbox(folders_frame, height=10)
        self.folders_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(folders_frame, orient=tk.VERTICAL)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.folders_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.folders_listbox.yview)
        
        # Boutons de gestion des dossiers
        folder_buttons = ttk.Frame(config_frame)
        folder_buttons.pack(pady=10)
        
        ttk.Button(folder_buttons, text="‚ûï Ajouter Dossier", 
                  command=self.add_folder).grid(row=0, column=0, padx=5)
        ttk.Button(folder_buttons, text="‚ûñ Supprimer", 
                  command=self.remove_folder).grid(row=0, column=1, padx=5)
        ttk.Button(folder_buttons, text="üìÅ Ouvrir Dossier Scan", 
                  command=self.open_scan_folder).grid(row=0, column=2, padx=5)
        
        # Configuration globale
        global_frame = ttk.LabelFrame(config_frame, text="Configuration Globale", padding=10)
        global_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(global_frame, text="üåç Configurer Global", 
                  command=self.configure_global, width=25).pack(side=tk.LEFT, padx=5)
        ttk.Button(global_frame, text="üìÇ Config par Dossier", 
                  command=self.configure_folder, width=25).pack(side=tk.LEFT, padx=5)
        ttk.Button(global_frame, text="üîÑ Config Compl√®te", 
                  command=self.run_full_config, width=25).pack(side=tk.LEFT, padx=5)
    
    def create_processing_tab(self):
        """Onglet de traitement"""
        process_frame = ttk.Frame(self.notebook)
        self.notebook.add(process_frame, text="‚ñ∂Ô∏è Traitement")
        
        # Frame de contr√¥le
        control_frame = ttk.LabelFrame(process_frame, text="Contr√¥les", padding=10)
        control_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # S√©lection du dossier √† traiter
        ttk.Label(control_frame, text="Dossier √† traiter:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.process_folder_var = tk.StringVar()
        self.process_folder_combo = ttk.Combobox(control_frame, textvariable=self.process_folder_var, width=30)
        self.process_folder_combo.grid(row=0, column=1, padx=5, pady=5)
        
        # Boutons de traitement
        ttk.Button(control_frame, text="‚ñ∂Ô∏è Traiter", command=self.start_processing, 
                  width=15).grid(row=0, column=2, padx=5, pady=5)
        ttk.Button(control_frame, text="‚èπÔ∏è Arr√™ter", command=self.stop_processing, 
                  width=15).grid(row=0, column=3, padx=5, pady=5)
        
        # Statistiques en temps r√©el
        stats_frame = ttk.LabelFrame(process_frame, text="Statistiques", padding=10)
        stats_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.stats_labels = {}
        stats = ["PDFs trouv√©s", "En cours", "Trait√©s", "Erreurs"]
        for i, stat in enumerate(stats):
            ttk.Label(stats_frame, text=f"{stat}:").grid(row=0, column=i*2, sticky=tk.W, padx=5)
            self.stats_labels[stat] = ttk.Label(stats_frame, text="0")
            self.stats_labels[stat].grid(row=0, column=i*2+1, sticky=tk.W, padx=5)
        
        # Console de sortie
        console_frame = ttk.LabelFrame(process_frame, text="Console", padding=10)
        console_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.console_text = scrolledtext.ScrolledText(console_frame, height=15, width=80, 
                                                      bg='black', fg='green', 
                                                      font=('Consolas', 9))
        self.console_text.pack(fill=tk.BOTH, expand=True)
    
    def create_review_tab(self):
        """Onglet de r√©vision"""
        review_frame = ttk.Frame(self.notebook)
        self.notebook.add(review_frame, text="‚úÖ R√©vision")
        
        # Frame de contr√¥le
        control_frame = ttk.LabelFrame(review_frame, text="R√©vision des R√©sultats", padding=10)
        control_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Premi√®re ligne de boutons
        ttk.Button(control_frame, text="üìã Charger Derniers R√©sultats", 
                  command=self.load_results, width=25).grid(row=0, column=0, padx=5, pady=5)
        ttk.Button(control_frame, text="‚úÖ Valider", 
                  command=self.validate_result, width=15).grid(row=0, column=1, padx=5, pady=5)
        ttk.Button(control_frame, text="‚ùå Corriger", 
                  command=self.correct_result, width=15).grid(row=0, column=2, padx=5, pady=5)
        
        # Deuxi√®me ligne - Navigation
        self.prev_button = ttk.Button(control_frame, text="‚¨ÖÔ∏è Pr√©c√©dent", 
                                     command=self.previous_result, width=15)
        self.prev_button.grid(row=1, column=0, padx=5, pady=5)
        self.result_counter = ttk.Label(control_frame, text="0/0")
        self.result_counter.grid(row=1, column=1, padx=5, pady=5)
        self.next_button = ttk.Button(control_frame, text="‚û°Ô∏è Suivant", 
                                     command=self.next_result, width=15)
        self.next_button.grid(row=1, column=2, padx=5, pady=5)
        
        # Affichage du r√©sultat actuel
        result_frame = ttk.LabelFrame(review_frame, text="R√©sultat Actuel", padding=10)
        result_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Labels pour les informations
        self.result_labels = {}
        fields = ["Fichier Original", "Nom G√©n√©r√©", "Date Extraite", "Fournisseur", "Num√©ro"]
        for i, field in enumerate(fields):
            ttk.Label(result_frame, text=f"{field}:").grid(row=i, column=0, sticky=tk.W, padx=5, pady=3)
            self.result_labels[field] = ttk.Label(result_frame, text="", font=('Arial', 10, 'bold'))
            self.result_labels[field].grid(row=i, column=1, sticky=tk.W, padx=5, pady=3)
        
        # Aper√ßu du texte OCR
        preview_frame = ttk.LabelFrame(review_frame, text="Aper√ßu OCR", padding=10)
        preview_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.preview_text = scrolledtext.ScrolledText(preview_frame, height=8, width=80, wrap=tk.WORD)
        self.preview_text.pack(fill=tk.BOTH, expand=True)
    
    def create_logs_tab(self):
        """Onglet des logs"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìä Logs")
        
        # Contr√¥les
        control_frame = ttk.Frame(logs_frame)
        control_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(control_frame, text="üîÑ Rafra√Æchir", 
                  command=self.refresh_logs).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="üóëÔ∏è Effacer", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="üíæ Sauvegarder", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=5)
        
        # Zone de texte pour les logs
        self.logs_text = scrolledtext.ScrolledText(logs_frame, height=20, width=100, wrap=tk.WORD)
        self.logs_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    # --- M√©thodes fonctionnelles ---
    
    def load_configuration(self):
        """Charge la configuration actuelle"""
        try:
            # Charger config.json
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
                    
                # Mettre √† jour la liste des dossiers
                self.folders_listbox.delete(0, tk.END)
                for folder in self.config.get('sub_folders', []):
                    self.folders_listbox.insert(tk.END, folder)
                
                # Mettre √† jour le combo de traitement
                self.process_folder_combo['values'] = ['Tous'] + self.config.get('sub_folders', [])
                if self.process_folder_combo['values']:
                    self.process_folder_combo.current(0)
            else:
                self.config = {'sub_folders': []}
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors du chargement de la configuration: {e}")
    
    def update_status(self):
        """Met √† jour l'√©tat du syst√®me"""
        self.info_text.delete(1.0, tk.END)
        
        info = []
        info.append("üìä √âTAT DU SYST√àME\n")
        info.append("="*50 + "\n\n")
        
        # Dossiers configur√©s
        folders = self.config.get('sub_folders', [])
        info.append(f"üìÅ Dossiers configur√©s: {len(folders)}\n")
        if folders:
            info.append(f"   {', '.join(folders[:5])}\n")
        
        # PDFs en attente
        total_pdfs = 0
        for folder in folders:
            scan_path = f"scan/{folder}"
            if os.path.exists(scan_path):
                pdfs = [f for f in os.listdir(scan_path) if f.lower().endswith('.pdf')]
                total_pdfs += len(pdfs)
        info.append(f"\nüìÑ PDFs en attente: {total_pdfs}\n")
        
        # Configuration hi√©rarchique
        if os.path.exists(self.hierarchical_config_path):
            info.append(f"\n‚úÖ Configuration hi√©rarchique: Active\n")
        else:
            info.append(f"\n‚ö†Ô∏è Configuration hi√©rarchique: Non configur√©e\n")
        
        # Tesseract
        tesseract_ok = self.check_tesseract()
        if tesseract_ok:
            info.append(f"‚úÖ Tesseract OCR: Install√©\n")
        else:
            info.append(f"‚ùå Tesseract OCR: Non trouv√©\n")
        
        self.info_text.insert(tk.END, ''.join(info))
        self.status_bar.config(text=f"Mise √† jour: {datetime.now().strftime('%H:%M:%S')}")
    
    def check_tesseract(self):
        """V√©rifie si Tesseract est install√©"""
        paths = [
            r'C:\Tools\Tesseract-OCR\tesseract.exe',
            r'C:\Program Files\Tesseract-OCR\tesseract.exe'
        ]
        for path in paths:
            if os.path.exists(path):
                return True
        return False
    
    def quick_config(self):
        """Lance la configuration rapide"""
        self.run_script("python scripts/configure_hierarchical.py")
    
    def quick_process(self):
        """Lance le traitement rapide"""
        self.notebook.select(2)  # Aller √† l'onglet traitement
        self.start_processing()
    
    def show_stats(self):
        """Affiche les statistiques"""
        try:
            from src.utils.learning_system import LearningSystem
            learning = LearningSystem()
            report = learning.generate_improvement_report()
            
            # Cr√©er une fen√™tre popup
            stats_window = tk.Toplevel(self.root)
            stats_window.title("Statistiques d'Apprentissage")
            stats_window.geometry("600x400")
            
            text_widget = scrolledtext.ScrolledText(stats_window, wrap=tk.WORD)
            text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            text_widget.insert(tk.END, report)
            text_widget.config(state=tk.DISABLED)
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de charger les statistiques: {e}")
    
    def add_folder(self):
        """Ajoute un nouveau dossier"""
        folder_name = simpledialog.askstring("Nouveau Dossier", 
                                                "Nom du nouveau dossier:")
        if folder_name:
            # Nettoyer le nom
            folder_clean = folder_name.replace(" ", "").replace("/", "").replace("\\", "")
            
            # Cr√©er les dossiers
            os.makedirs(f"scan/{folder_clean}", exist_ok=True)
            os.makedirs(f"output/{folder_clean}", exist_ok=True)
            
            # Mettre √† jour la config
            if 'sub_folders' not in self.config:
                self.config['sub_folders'] = []
            if folder_clean not in self.config['sub_folders']:
                self.config['sub_folders'].append(folder_clean)
                
                # Sauvegarder
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    json.dump(self.config, f, indent=2, ensure_ascii=False)
                
                # Recharger
                self.load_configuration()
                messagebox.showinfo("Succ√®s", f"Dossier '{folder_clean}' cr√©√©!")
    
    def remove_folder(self):
        """Supprime un dossier s√©lectionn√©"""
        selection = self.folders_listbox.curselection()
        if selection:
            folder = self.folders_listbox.get(selection[0])
            if messagebox.askyesno("Confirmation", f"Supprimer le dossier '{folder}'?"):
                self.config['sub_folders'].remove(folder)
                
                # Sauvegarder
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    json.dump(self.config, f, indent=2, ensure_ascii=False)
                
                # Recharger
                self.load_configuration()
    
    def open_scan_folder(self):
        """Ouvre le dossier scan s√©lectionn√©"""
        selection = self.folders_listbox.curselection()
        if selection:
            folder = self.folders_listbox.get(selection[0])
            path = f"scan/{folder}"
            if os.path.exists(path):
                if sys.platform == "win32":
                    os.startfile(path)
                elif sys.platform == "darwin":
                    subprocess.call(["open", path])
                else:
                    subprocess.call(["xdg-open", path])
    
    def configure_global(self):
        """Configure les param√®tres globaux"""
        # Cr√©er une fen√™tre de configuration
        config_window = tk.Toplevel(self.root)
        config_window.title("Configuration Globale")
        config_window.geometry("600x500")
        
        # Charger la config hi√©rarchique
        hierarchical_config = {}
        if os.path.exists(self.hierarchical_config_path):
            with open(self.hierarchical_config_path, 'r', encoding='utf-8') as f:
                hierarchical_config = json.load(f)
        
        global_config = hierarchical_config.get('global', {})
        
        # Frame principal
        main_frame = ttk.Frame(config_window, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Infos utilisateur
        info_frame = ttk.LabelFrame(main_frame, text="Informations Utilisateur", padding=10)
        info_frame.pack(fill=tk.X, pady=10)
        
        ttk.Label(info_frame, text="Nom:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        name_entry = ttk.Entry(info_frame, width=30)
        name_entry.grid(row=0, column=1, padx=5, pady=5)
        name_entry.insert(0, global_config.get('user_info', {}).get('name', ''))
        
        ttk.Label(info_frame, text="Entreprise:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        company_entry = ttk.Entry(info_frame, width=30)
        company_entry.grid(row=1, column=1, padx=5, pady=5)
        company_entry.insert(0, global_config.get('user_info', {}).get('company', ''))
        
        # Mots √† ignorer
        ignore_frame = ttk.LabelFrame(main_frame, text="Mots √† Ignorer (un par ligne)", padding=10)
        ignore_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        ignore_text = tk.Text(ignore_frame, height=10, width=50)
        ignore_text.pack(fill=tk.BOTH, expand=True)
        ignore_words = global_config.get('ignore_words', [])
        ignore_text.insert(tk.END, '\n'.join(ignore_words))
        
        # Boutons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=10)
        
        def save_global_config():
            # Construire la nouvelle config
            new_global = {
                'user_info': {
                    'name': name_entry.get(),
                    'company': company_entry.get()
                },
                'ignore_words': [w.strip() for w in ignore_text.get(1.0, tk.END).strip().split('\n') if w.strip()]
            }
            
            # Mettre √† jour la config hi√©rarchique
            hierarchical_config['global'] = new_global
            
            # Sauvegarder
            os.makedirs(os.path.dirname(self.hierarchical_config_path), exist_ok=True)
            with open(self.hierarchical_config_path, 'w', encoding='utf-8') as f:
                json.dump(hierarchical_config, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("Succ√®s", "Configuration globale sauvegard√©e!")
            config_window.destroy()
        
        ttk.Button(button_frame, text="üíæ Sauvegarder", command=save_global_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå Annuler", command=config_window.destroy).pack(side=tk.LEFT, padx=5)
    
    def configure_folder(self):
        """Configure un dossier sp√©cifique"""
        selection = self.folders_listbox.curselection()
        if not selection:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner un dossier")
            return
            
        folder = self.folders_listbox.get(selection[0])
        
        # Cr√©er une fen√™tre de configuration
        config_window = tk.Toplevel(self.root)
        config_window.title(f"Configuration: {folder}")
        config_window.geometry("600x500")
        
        # Charger la config hi√©rarchique
        hierarchical_config = {}
        if os.path.exists(self.hierarchical_config_path):
            with open(self.hierarchical_config_path, 'r', encoding='utf-8') as f:
                hierarchical_config = json.load(f)
        
        folder_config = hierarchical_config.get('folders', {}).get(folder, {})
        
        # Frame principal
        main_frame = ttk.Frame(config_window, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Mots √† ajouter
        add_frame = ttk.LabelFrame(main_frame, text="Mots √† Ajouter (+) - un par ligne", padding=10)
        add_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        add_text = tk.Text(add_frame, height=8, width=50)
        add_text.pack(fill=tk.BOTH, expand=True)
        add_words = folder_config.get('add', [])
        add_text.insert(tk.END, '\n'.join(add_words))
        
        # Mots √† retirer
        remove_frame = ttk.LabelFrame(main_frame, text="Mots √† Retirer (-) - un par ligne", padding=10)
        remove_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        remove_text = tk.Text(remove_frame, height=8, width=50)
        remove_text.pack(fill=tk.BOTH, expand=True)
        remove_words = folder_config.get('remove', [])
        remove_text.insert(tk.END, '\n'.join(remove_words))
        
        # Boutons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=10)
        
        def save_folder_config():
            # Construire la nouvelle config
            new_folder_config = {
                'add': [w.strip() for w in add_text.get(1.0, tk.END).strip().split('\n') if w.strip()],
                'remove': [w.strip() for w in remove_text.get(1.0, tk.END).strip().split('\n') if w.strip()]
            }
            
            # Mettre √† jour la config hi√©rarchique
            if 'folders' not in hierarchical_config:
                hierarchical_config['folders'] = {}
            hierarchical_config['folders'][folder] = new_folder_config
            
            # Sauvegarder
            with open(self.hierarchical_config_path, 'w', encoding='utf-8') as f:
                json.dump(hierarchical_config, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("Succ√®s", f"Configuration du dossier '{folder}' sauvegard√©e!")
            config_window.destroy()
        
        ttk.Button(button_frame, text="üíæ Sauvegarder", command=save_folder_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå Annuler", command=config_window.destroy).pack(side=tk.LEFT, padx=5)
    
    def run_full_config(self):
        """Lance la configuration compl√®te"""
        self.run_script("python scripts/configure_hierarchical.py")
    
    def start_processing(self):
        """D√©marre le traitement"""
        if not self.processing:
            self.processing = True
            self.console_text.delete(1.0, tk.END)
            
            # Lancer dans un thread s√©par√©
            thread = threading.Thread(target=self.process_pdfs)
            thread.start()
    
    def stop_processing(self):
        """Arr√™te le traitement"""
        self.processing = False
        self.console_text.insert(tk.END, "\n‚èπÔ∏è Traitement arr√™t√©\n")
    
    def update_stats(self, stat_name, value):
        """Met √† jour une statistique"""
        if stat_name in self.stats:
            self.stats[stat_name] = value
            self.stats_labels[stat_name].config(text=str(value))
            self.root.update_idletasks()
    
    def auto_update_stats(self):
        """Met √† jour automatiquement les statistiques toutes les 5 secondes"""
        if not self.processing:
            # Compter les PDFs en attente
            total_pdfs = 0
            folders = self.config.get('sub_folders', [])
            for folder in folders:
                scan_path = f"scan/{folder}"
                if os.path.exists(scan_path):
                    pdfs = [f for f in os.listdir(scan_path) if f.lower().endswith('.pdf')]
                    total_pdfs += len(pdfs)
            
            # Mettre √† jour seulement si pas en cours de traitement
            if self.stats["En cours"] == 0:
                self.update_stats("PDFs trouv√©s", total_pdfs)
        
        # Programmer la prochaine mise √† jour dans 5 secondes
        self.root.after(5000, self.auto_update_stats)
    
    def process_pdfs(self):
        """Traite les PDFs"""
        try:
            # R√©initialiser les statistiques
            self.update_stats("PDFs trouv√©s", 0)
            self.update_stats("En cours", 0)
            self.update_stats("Trait√©s", 0)
            self.update_stats("Erreurs", 0)
            
            self.console_text.insert(tk.END, "‚ñ∂Ô∏è D√©marrage du traitement...\n")
            
            # Compter les PDFs dans les dossiers scan
            total_pdfs = 0
            folders = self.config.get('sub_folders', [])
            for folder in folders:
                scan_path = f"scan/{folder}"
                if os.path.exists(scan_path):
                    pdfs = [f for f in os.listdir(scan_path) if f.lower().endswith('.pdf')]
                    total_pdfs += len(pdfs)
            
            self.update_stats("PDFs trouv√©s", total_pdfs)
            self.console_text.insert(tk.END, f"üìÑ {total_pdfs} PDFs d√©tect√©s\n")
            
            # Lancer le script r√©el
            process = subprocess.Popen(
                ["python", "main.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                cwd=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            )
            
            processed_count = 0
            error_count = 0
            
            for line in process.stdout:
                if not self.processing:
                    process.terminate()
                    break
                    
                # Analyser la ligne pour mettre √† jour les stats
                line_lower = line.lower()
                if "processing" in line_lower or "traitement" in line_lower:
                    self.update_stats("En cours", 1)
                elif "successfully" in line_lower or "succ√®s" in line_lower or "termin√©" in line_lower:
                    processed_count += 1
                    self.update_stats("Trait√©s", processed_count)
                    self.update_stats("En cours", 0)
                elif "error" in line_lower or "erreur" in line_lower:
                    error_count += 1
                    self.update_stats("Erreurs", error_count)
                    self.update_stats("En cours", 0)
                
                self.console_text.insert(tk.END, line)
                self.console_text.see(tk.END)
                self.root.update()
            
            self.update_stats("En cours", 0)
            self.console_text.insert(tk.END, f"\n‚úÖ Traitement termin√© - {processed_count} fichiers trait√©s, {error_count} erreurs\n")
            
        except Exception as e:
            self.console_text.insert(tk.END, f"\n‚ùå Erreur: {e}\n")
            self.update_stats("Erreurs", self.stats["Erreurs"] + 1)
        finally:
            self.processing = False
            self.update_stats("En cours", 0)
    
    def load_results(self):
        """Charge les derniers r√©sultats pour r√©vision"""
        try:
            # Chercher les fichiers trait√©s r√©cemment dans output/
            self.results_list = []
            output_folders = self.config.get('sub_folders', [])
            
            for folder in output_folders:
                output_path = f"output/{folder}"
                if os.path.exists(output_path):
                    # Trouver les PDFs trait√©s r√©cemment
                    pdf_files = []
                    for f in os.listdir(output_path):
                        if f.lower().endswith('.pdf'):
                            full_path = os.path.join(output_path, f)
                            mtime = os.path.getmtime(full_path)
                            pdf_files.append((f, full_path, mtime, folder))
                    
                    # Trier par date de modification (plus r√©cent d'abord)
                    pdf_files.sort(key=lambda x: x[2], reverse=True)
                    self.results_list.extend(pdf_files[:5])  # Prendre les 5 plus r√©cents par dossier
            
            if self.results_list:
                # Charger le premier r√©sultat
                self.current_result = 0
                self.display_current_result()
                messagebox.showinfo("Succ√®s", f"{len(self.results_list)} r√©sultats charg√©s")
            else:
                messagebox.showinfo("Info", "Aucun r√©sultat r√©cent trouv√© dans les dossiers output/")
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors du chargement: {e}")
    
    def display_current_result(self):
        """Affiche le r√©sultat actuellement s√©lectionn√©"""
        if not self.results_list or self.current_result is None:
            return
        
        # R√©initialiser la correction en attente si on change de fichier
        self.pending_correction = None
        self.enable_navigation()
        
        filename, full_path, mtime, folder = self.results_list[self.current_result]
        
        # Sauvegarder les donn√©es originales
        self.original_data = {
            'filename': filename,
            'full_path': full_path,
            'mtime': mtime,
            'folder': folder
        }
        
        # Mettre √† jour les labels
        self.result_labels["Fichier Original"].config(text=filename)
        self.result_labels["Nom G√©n√©r√©"].config(text=filename)
        
        # Extraire les informations du nom de fichier
        name_parts = filename.replace('.pdf', '').split('_')
        if len(name_parts) >= 3:
            self.result_labels["Date Extraite"].config(text=name_parts[0] if name_parts[0] else "Non d√©tect√©e")
            self.result_labels["Fournisseur"].config(text=name_parts[1] if name_parts[1] else "Non d√©tect√©")
            self.result_labels["Num√©ro"].config(text=name_parts[2] if name_parts[2] else "Non d√©tect√©")
        
        # Simuler l'aper√ßu OCR (on pourrait lire un fichier .txt correspondant)
        preview_text = f"Dossier: {folder}\n"
        preview_text += f"Trait√© le: {datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M:%S')}\n"
        preview_text += f"Fichier: {filename}\n\n"
        preview_text += "Aper√ßu OCR:\n" + "-"*50 + "\n"
        preview_text += "[Le contenu OCR serait affich√© ici]\n"
        
        self.preview_text.delete(1.0, tk.END)
        self.preview_text.insert(tk.END, preview_text)
        
        # Mettre √† jour le compteur
        self.update_result_counter()
    
    def validate_result(self):
        """Valide le r√©sultat actuel et l'enregistre pour l'apprentissage"""
        if not self.results_list or self.current_result is None:
            messagebox.showwarning("Attention", "Aucun r√©sultat charg√©")
            return
        
        # Si correction en attente, l'appliquer d'abord
        if self.pending_correction:
            if not self.apply_pending_correction():
                return  # Erreur lors de l'application
        
        filename, full_path, _, folder = self.results_list[self.current_result]
        
        try:
            # Extraire les informations du nom de fichier
            name_parts = filename.replace('.pdf', '').split('_')
            if len(name_parts) >= 3:
                date_extracted = name_parts[0]
                supplier_extracted = name_parts[1]
                invoice_extracted = name_parts[2] if len(name_parts) > 2 else ""
                
                # Enregistrer dans le syst√®me d'apprentissage
                from src.utils.learning_system import LearningSystem
                learning = LearningSystem()
                
                # Enregistrer comme extraction r√©ussie
                learning.record_extraction(
                    folder_name=folder,
                    extraction_type="date",
                    extracted_value=date_extracted,
                    confidence=1.0
                )
                learning.record_extraction(
                    folder_name=folder,
                    extraction_type="supplier",
                    extracted_value=supplier_extracted,
                    confidence=1.0
                )
                learning.record_extraction(
                    folder_name=folder,
                    extraction_type="invoice",
                    extracted_value=invoice_extracted,
                    confidence=1.0
                )
                
                # Cr√©er un fichier de validation pour marquer ce fichier comme "v√©rifi√©"
                validation_dir = "output/.validated"
                os.makedirs(validation_dir, exist_ok=True)
                
                validation_file = os.path.join(validation_dir, f"{filename}.validated")
                validation_data = {
                    "filename": filename,
                    "folder": folder,
                    "validated_at": datetime.now().isoformat(),
                    "date": date_extracted,
                    "supplier": supplier_extracted,
                    "invoice": invoice_extracted,
                    "status": "validated"
                }
                
                with open(validation_file, 'w', encoding='utf-8') as f:
                    json.dump(validation_data, f, indent=2)
                
                messagebox.showinfo("Succ√®s", 
                    f"‚úÖ '{filename}' valid√©!\n\n"
                    f"Les donn√©es ont √©t√© enregistr√©es pour am√©liorer l'extraction:\n"
                    f"‚Ä¢ Date: {date_extracted}\n"
                    f"‚Ä¢ Fournisseur: {supplier_extracted}\n"
                    f"‚Ä¢ Num√©ro: {invoice_extracted}")
            else:
                messagebox.showwarning("Attention", 
                    "Format de nom de fichier non reconnu.\n"
                    "Utilisez 'Corriger' pour ajuster le nom.")
                return
            
            # Passer au suivant
            if self.current_result < len(self.results_list) - 1:
                self.current_result += 1
                self.display_current_result()
            else:
                messagebox.showinfo("Info", "Tous les r√©sultats ont √©t√© r√©vis√©s")
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de la validation: {e}")
    
    def correct_result(self):
        """Ouvre l'interface de correction"""
        if not self.results_list or self.current_result is None:
            messagebox.showwarning("Attention", "Aucun r√©sultat charg√©")
            return
            
        filename, full_path, _, folder = self.results_list[self.current_result]
        
        # Cr√©er une fen√™tre de correction
        correction_window = tk.Toplevel(self.root)
        correction_window.title(f"Correction: {filename}")
        correction_window.geometry("600x500")
        
        # Frame principal
        main_frame = ttk.Frame(correction_window, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Informations actuelles
        current_frame = ttk.LabelFrame(main_frame, text="Informations actuelles", padding=10)
        current_frame.pack(fill=tk.X, pady=10)
        
        name_parts = filename.replace('.pdf', '').split('_')
        
        ttk.Label(current_frame, text="Date:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        date_entry = ttk.Entry(current_frame, width=20)
        date_entry.grid(row=0, column=1, padx=5, pady=5)
        date_entry.insert(0, name_parts[0] if len(name_parts) > 0 else "")
        
        ttk.Label(current_frame, text="Fournisseur:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        supplier_entry = ttk.Entry(current_frame, width=30)
        supplier_entry.grid(row=1, column=1, padx=5, pady=5)
        supplier_entry.insert(0, name_parts[1] if len(name_parts) > 1 else "")
        
        ttk.Label(current_frame, text="Num√©ro:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        number_entry = ttk.Entry(current_frame, width=20)
        number_entry.grid(row=2, column=1, padx=5, pady=5)
        number_entry.insert(0, name_parts[2] if len(name_parts) > 2 else "")
        
        # Boutons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=10)
        
        def save_correction():
            new_date = date_entry.get().strip()
            new_supplier = supplier_entry.get().strip()
            new_number = number_entry.get().strip()
            
            if new_date and new_supplier and new_number:
                # Nettoyer les champs pour √©viter les caract√®res probl√©matiques
                import re
                new_date = re.sub(r'[^\w\-]', '', new_date)
                new_supplier = re.sub(r'[^\w\-]', '', new_supplier)  
                new_number = re.sub(r'[^\w\-]', '', new_number)
                
                # V√©rifier que les champs sont encore valides apr√®s nettoyage
                if not new_date or not new_supplier or not new_number:
                    messagebox.showwarning("Attention", "Les champs contiennent des caract√®res invalides")
                    return
                
                new_filename = f"{new_date}_{new_supplier}_{new_number}.pdf"
                
                # Pr√©parer la correction (ne pas l'appliquer)
                self.pending_correction = {
                    'old_path': full_path,
                    'new_filename': new_filename,
                    'date': new_date,
                    'supplier': new_supplier,
                    'number': new_number
                }
                
                # Mettre √† jour l'affichage avec les nouvelles donn√©es
                self.result_labels["Nom G√©n√©r√©"].config(text=new_filename)
                self.result_labels["Date Extraite"].config(text=new_date)
                self.result_labels["Fournisseur"].config(text=new_supplier)
                self.result_labels["Num√©ro"].config(text=new_number)
                
                # D√©sactiver la navigation
                self.disable_navigation()
                self.update_result_counter()
                
                messagebox.showinfo("Correction pr√©par√©e", 
                    f"Correction pr√©par√©e: {new_filename}\n\n"
                    "Cliquez sur 'Valider' pour appliquer la correction\n"
                    "ou 'Corriger' √† nouveau pour modifier.")
                correction_window.destroy()
            else:
                messagebox.showwarning("Attention", "Tous les champs sont requis")
        
        def cancel_correction():
            # Annuler et restaurer les donn√©es originales
            if self.pending_correction:
                self.cancel_pending_correction()
            correction_window.destroy()
        
        ttk.Button(button_frame, text="üíæ Pr√©parer", command=save_correction).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå Annuler", command=cancel_correction).pack(side=tk.LEFT, padx=5)
    
    def previous_result(self):
        """Affiche le r√©sultat pr√©c√©dent"""
        if self.results_list and self.current_result is not None and self.current_result > 0:
            self.current_result -= 1
            self.display_current_result()
    
    def next_result(self):
        """Affiche le r√©sultat suivant"""
        if self.results_list and self.current_result is not None and self.current_result < len(self.results_list) - 1:
            self.current_result += 1
            self.display_current_result()
    
    def update_result_counter(self):
        """Met √† jour le compteur de r√©sultats"""
        if self.results_list and self.current_result is not None:
            status = ""
            if self.pending_correction:
                status = " [CORRECTION EN ATTENTE]"
            self.result_counter.config(text=f"{self.current_result + 1}/{len(self.results_list)}{status}")
        else:
            self.result_counter.config(text="0/0")
    
    def enable_navigation(self):
        """Active la navigation"""
        self.prev_button.config(state="normal")
        self.next_button.config(state="normal")
    
    def disable_navigation(self):
        """D√©sactive la navigation"""
        self.prev_button.config(state="disabled")
        self.next_button.config(state="disabled")
    
    def apply_pending_correction(self):
        """Applique la correction en attente avec backup"""
        if not self.pending_correction:
            return True
            
        old_path = self.pending_correction['old_path']
        new_filename = self.pending_correction['new_filename']
        new_path = os.path.join(os.path.dirname(old_path), new_filename)
        
        # V√©rifications de s√©curit√©
        if not os.path.exists(old_path):
            messagebox.showerror("Erreur", f"Fichier source introuvable: {old_path}")
            return False
            
        if os.path.exists(new_path):
            response = messagebox.askyesno("Fichier existe", 
                f"Un fichier nomm√© '{new_filename}' existe d√©j√†.\n"
                "Voulez-vous le remplacer?")
            if not response:
                return False
        
        # Cr√©er un backup temporaire
        backup_path = old_path + ".backup"
        try:
            # Faire le backup
            import shutil
            shutil.copy2(old_path, backup_path)
            
            # Renommer le fichier
            os.rename(old_path, new_path)
            
            # Si succ√®s, supprimer le backup
            os.remove(backup_path)
            
            # Mettre √† jour la liste des r√©sultats
            self.results_list[self.current_result] = (
                new_filename, 
                new_path, 
                self.results_list[self.current_result][2],
                self.results_list[self.current_result][3]
            )
            
            # R√©activer la navigation
            self.pending_correction = None
            self.enable_navigation()
            
            # Rafra√Æchir l'affichage
            self.display_current_result()
            
            return True
            
        except Exception as e:
            # En cas d'erreur, restaurer le backup
            try:
                if os.path.exists(backup_path):
                    if not os.path.exists(old_path):
                        os.rename(backup_path, old_path)
                    else:
                        os.remove(backup_path)
            except:
                pass
            
            messagebox.showerror("Erreur", f"Impossible d'appliquer la correction: {e}")
            return False
    
    def cancel_pending_correction(self):
        """Annule la correction en attente"""
        if self.pending_correction and self.original_data:
            # Restaurer les donn√©es originales
            self.results_list[self.current_result] = (
                self.original_data['filename'],
                self.original_data['full_path'],
                self.original_data['mtime'],
                self.original_data['folder']
            )
            
            self.pending_correction = None
            self.enable_navigation()
            self.display_current_result()
    
    def refresh_logs(self):
        """Rafra√Æchit les logs"""
        self.logs_text.delete(1.0, tk.END)
        
        # Chercher le dernier fichier de log
        log_dir = "logs"
        if os.path.exists(log_dir):
            log_files = sorted([f for f in os.listdir(log_dir) if f.endswith('.log')])
            if log_files:
                latest_log = os.path.join(log_dir, log_files[-1])
                try:
                    with open(latest_log, 'r', encoding='utf-8') as f:
                        content = f.read()
                        self.logs_text.insert(tk.END, content)
                except Exception as e:
                    self.logs_text.insert(tk.END, f"Erreur lecture log: {e}")
    
    def clear_logs(self):
        """Efface les logs affich√©s"""
        self.logs_text.delete(1.0, tk.END)
    
    def save_logs(self):
        """Sauvegarde les logs"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.logs_text.get(1.0, tk.END))
            messagebox.showinfo("Succ√®s", f"Logs sauvegard√©s dans {filename}")
    
    def run_script(self, command):
        """Lance un script dans une nouvelle fen√™tre"""
        if sys.platform == "win32":
            subprocess.Popen(["cmd", "/c", "start", "cmd", "/k", command])
        else:
            # Pour Linux/Mac, lancer dans le terminal par d√©faut
            subprocess.Popen(command, shell=True)
    
    def check_dependencies(self):
        """V√©rifie les d√©pendances au d√©marrage"""
        try:
            checker = DependencyChecker()
            installed, missing = checker.check_all_packages()
            
            if missing:
                self.dependencies_ok = False
                response = messagebox.askyesno(
                    "D√©pendances Manquantes",
                    f"Des d√©pendances sont manquantes:\n{', '.join(missing)}\n\n"
                    "Voulez-vous les installer maintenant?"
                )
                if response:
                    self.install_dependencies()
            else:
                self.dependencies_ok = True
        except Exception as e:
            print(f"Erreur lors de la v√©rification des d√©pendances: {e}")
            self.dependencies_ok = False
    
    def check_dependencies_gui(self):
        """V√©rifie les d√©pendances avec interface graphique"""
        # Cr√©er une fen√™tre de v√©rification
        check_window = tk.Toplevel(self.root)
        check_window.title("V√©rification des D√©pendances")
        check_window.geometry("600x400")
        
        # Zone de texte pour les r√©sultats
        text_widget = scrolledtext.ScrolledText(check_window, wrap=tk.WORD, 
                                               font=('Consolas', 9))
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Bouton de fermeture
        ttk.Button(check_window, text="Fermer", 
                  command=check_window.destroy).pack(pady=10)
        
        # Lancer la v√©rification dans un thread
        def run_check():
            import sys
            from io import StringIO
            
            # Capturer la sortie
            old_stdout = sys.stdout
            sys.stdout = StringIO()
            
            try:
                checker = DependencyChecker()
                result = checker.full_check()
                output = sys.stdout.getvalue()
            finally:
                sys.stdout = old_stdout
            
            # Afficher le r√©sultat
            text_widget.insert(tk.END, output)
            
            if result:
                text_widget.insert(tk.END, "\n‚úÖ Tout est pr√™t!")
                self.dependencies_ok = True
            else:
                text_widget.insert(tk.END, "\n‚ö†Ô∏è Des composants sont manquants")
                self.dependencies_ok = False
        
        thread = threading.Thread(target=run_check)
        thread.start()
    
    def install_dependencies(self):
        """Installe les d√©pendances manquantes"""
        # Cr√©er une fen√™tre d'installation
        install_window = tk.Toplevel(self.root)
        install_window.title("Installation des D√©pendances")
        install_window.geometry("600x400")
        
        # Zone de texte pour les r√©sultats
        text_widget = scrolledtext.ScrolledText(install_window, wrap=tk.WORD,
                                               bg='black', fg='green',
                                               font=('Consolas', 9))
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Boutons
        button_frame = ttk.Frame(install_window)
        button_frame.pack(pady=10)
        
        close_btn = ttk.Button(button_frame, text="Fermer", 
                              command=install_window.destroy)
        close_btn.pack(side=tk.LEFT, padx=5)
        
        # Lancer l'installation dans un thread
        def run_install():
            text_widget.insert(tk.END, "üöÄ D√©marrage de l'installation...\n\n")
            
            checker = DependencyChecker()
            installed, missing = checker.check_all_packages()
            
            if not missing:
                text_widget.insert(tk.END, "‚úÖ Toutes les d√©pendances sont d√©j√† install√©es!\n")
                self.dependencies_ok = True
                return
            
            text_widget.insert(tk.END, f"üì¶ Packages √† installer: {', '.join(missing)}\n\n")
            
            for package in missing:
                text_widget.insert(tk.END, f"Installation de {package}...\n")
                text_widget.see(tk.END)
                install_window.update()
                
                if checker.install_package(package):
                    text_widget.insert(tk.END, f"‚úÖ {package} install√©\n")
                else:
                    text_widget.insert(tk.END, f"‚ùå √âchec pour {package}\n")
                
                text_widget.insert(tk.END, "\n")
            
            # V√©rifier √† nouveau
            installed, still_missing = checker.check_all_packages()
            
            if not still_missing:
                text_widget.insert(tk.END, "\n‚úÖ Installation termin√©e avec succ√®s!\n")
                self.dependencies_ok = True
                messagebox.showinfo("Succ√®s", "Toutes les d√©pendances ont √©t√© install√©es!")
            else:
                text_widget.insert(tk.END, f"\n‚ö†Ô∏è Packages non install√©s: {', '.join(still_missing)}\n")
                text_widget.insert(tk.END, "\nVeuillez les installer manuellement:\n")
                text_widget.insert(tk.END, f"pip install {' '.join(still_missing)}\n")
                self.dependencies_ok = False
        
        thread = threading.Thread(target=run_install)
        thread.start()


def main():
    """Point d'entr√©e principal"""
    root = tk.Tk()
    app = OCRAssistantGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()